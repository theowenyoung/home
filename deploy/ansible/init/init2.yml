---
- name: Init and Harden Debian Server
  hosts: all
  become: yes
  vars:
    server_user: "deploy"
    team_members:
      - "theowenyoung"

  tasks:
    # === System Updates ===
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Upgrade all packages
      apt:
        upgrade: dist
        autoremove: yes
        autoclean: yes

    # === Essential Security Packages ===
    - name: Install essential security packages
      apt:
        name:
          - ufw
          - fail2ban
          - unattended-upgrades
          - curl
          - wget
          - gnupg
          - ca-certificates
          - apt-transport-https
        state: present

    # === User Management ===
    - name: Create non-root user
      user:
        name: "{{ server_user }}"
        groups: sudo
        shell: /bin/bash
        create_home: yes

    # =============================
    # 团队成员 SSH Key 管理
    # =============================

    - name: Add team members SSH keys from GitHub
      authorized_key:
        user: "{{ server_user }}"
        state: present
        key: "https://github.com/{{ item }}.keys"
        comment: "team-{{ item }}"
      loop: "{{ team_members }}"

    # =============================
    # SSH Key 管理脚本部署
    # =============================

    - name: Copy SSH key management script
      copy:
        src: manage-ssh-keys.sh
        dest: /usr/local/bin/manage-ssh-keys
        mode: "0755"
        backup: yes

    - name: Create team members file
      copy:
        content: |
          # 团队成员列表
          # 每行一个 GitHub 用户名
          {% for member in team_members %}
          {{ member }}
          {% endfor %}
        dest: /etc/ssh-team-members.txt
        backup: yes

    - name: Initial SSH key sync
      command: /usr/local/bin/manage-ssh-keys -u {{ server_user }} sync -f /etc/ssh-team-members.txt
      when: initial_sync | default(true)

    - name: Allow sudo without password for deploy user
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: "^{{ server_user }} ALL="
        line: "{{ server_user }} ALL=(ALL) NOPASSWD: ALL"
        validate: "visudo -cf %s"

    # === SSH Hardening ===
    - name: Configure SSH security settings
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: yes
      loop:
        - {
            regexp: "^#?PubkeyAuthentication",
            line: "PubkeyAuthentication yes",
          }
        - {
            regexp: "^#?PasswordAuthentication",
            line: "PasswordAuthentication no",
          }
        - { regexp: "^#?PermitRootLogin", line: "PermitRootLogin no" }
        - { regexp: "^#?PermitEmptyPasswords", line: "PermitEmptyPasswords no" }
        - { regexp: "^#?MaxAuthTries", line: "MaxAuthTries 3" }
        - { regexp: "^#?ClientAliveInterval", line: "ClientAliveInterval 300" }
        - { regexp: "^#?ClientAliveCountMax", line: "ClientAliveCountMax 2" }
        - { regexp: "^#?Protocol", line: "Protocol 2" }
      notify: Restart SSH

    # === Kernel Security Parameters ===
    - name: Configure kernel security parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
        sysctl_file: /etc/sysctl.d/99-security.conf
      loop:
        # Network security
        - { name: "net.ipv4.conf.all.send_redirects", value: "0" }
        - { name: "net.ipv4.conf.default.send_redirects", value: "0" }
        - { name: "net.ipv4.conf.all.accept_redirects", value: "0" }
        - { name: "net.ipv4.conf.default.accept_redirects", value: "0" }
        - { name: "net.ipv4.conf.all.rp_filter", value: "1" }
        - { name: "net.ipv4.icmp_echo_ignore_broadcasts", value: "1" }
        - { name: "net.ipv4.icmp_ignore_bogus_error_responses", value: "1" }
        - { name: "net.ipv4.conf.all.accept_source_route", value: "0" }
        - { name: "net.ipv4.tcp_syncookies", value: "1" }
        # Docker forwarding (if needed)
        - { name: "net.ipv4.ip_forward", value: "1" }
        # File system security
        - { name: "fs.protected_hardlinks", value: "1" }
        - { name: "fs.protected_symlinks", value: "1" }
        - { name: "fs.suid_dumpable", value: "0" }
        # Kernel hardening
        - { name: "kernel.dmesg_restrict", value: "1" }
        - { name: "kernel.kptr_restrict", value: "1" }

    # === Firewall Configuration ===
    - name: Reset UFW to defaults
      ufw:
        state: reset

    - name: Set UFW default policies
      ufw:
        direction: "{{ item.direction }}"
        policy: "{{ item.policy }}"
      loop:
        - { direction: "incoming", policy: "deny" }
        - { direction: "outgoing", policy: "allow" }

    - name: Allow SSH through firewall
      ufw:
        rule: allow
        name: OpenSSH

    - name: Allow HTTP traffic
      ufw:
        rule: allow
        port: "80"
        proto: tcp

    - name: Allow HTTPS traffic
      ufw:
        rule: allow
        port: "443"
        proto: tcp

    - name: Enable UFW
      ufw:
        state: enabled

    # === Fail2ban Configuration ===
    - name: Create fail2ban local jail configuration
      copy:
        content: |
          [DEFAULT]
          bantime = 3600
          findtime = 600
          maxretry = 5
          banaction = ufw

          [sshd]
          enabled = true
          port = ssh
          filter = sshd
          logpath = /var/log/auth.log
          maxretry = 3
          bantime = 3600
        dest: /etc/fail2ban/jail.local
        backup: yes
      notify: Restart fail2ban

    # === Docker Installation (Optional) ===
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present
      when: install_docker | default(false)

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present
      when: install_docker | default(false)

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
      when: install_docker | default(false)

    - name: Add user to docker group
      user:
        name: "{{ server_user }}"
        groups: docker
        append: yes
      when: install_docker | default(false)

    - name: Configure Docker daemon
      copy:
        content: |
          {
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "10m",
              "max-file": "3"
            },
            "live-restore": true,
            "userland-proxy": false,
            "no-new-privileges": true,
            "features": {
              "buildkit": true
            }
          }
        dest: /etc/docker/daemon.json
        backup: yes
      when: install_docker | default(false)
      notify: Restart Docker

    # === Automatic Security Updates ===
    - name: Configure automatic security updates
      copy:
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Download-Upgradeable-Packages "1";
          APT::Periodic::AutocleanInterval "7";
          APT::Periodic::Unattended-Upgrade "1";
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        backup: yes

    - name: Configure unattended upgrades
      copy:
        content: |
          Unattended-Upgrade::Allowed-Origins {
              "${distro_id}:${distro_codename}-security";
              "${distro_id}ESMApps:${distro_codename}-apps-security";
              "${distro_id}ESM:${distro_codename}-infra-security";
          };
          Unattended-Upgrade::Remove-Unused-Dependencies "true";
          Unattended-Upgrade::Automatic-Reboot "false";
          Unattended-Upgrade::Mail "root";
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        backup: yes

    # === Service Management ===
    - name: Start and enable security services
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - ufw
        - fail2ban

    - name: Start and enable Docker (if installed)
      systemd:
        name: docker
        state: started
        enabled: yes
      when: install_docker | default(false)

  handlers:
    - name: Restart SSH
      systemd:
        name: ssh
        state: restarted

    - name: Restart fail2ban
      systemd:
        name: fail2ban
        state: restarted

    - name: Restart Docker
      systemd:
        name: docker
        state: restarted
